<?php
//Version: 1.00
//Author: K.Fridholm
//Last modified: 2000-12-26
//Added error handling with error.php
//
//'Last modified: 2001-03-01
//Added insert to handle tedious inserts
//
//Function ReturnRS_B(SQL)
//Function ReturnRS_R(SQL)
//Function ReturnRS_RW(SQL)
//Function ReturnConnection()
//Function RunSP(SQL,args...)
//Function FormatText(strText)
//Function ExecSQL(SQL)
//on error resume next

ob_start( );
header( "Expires: ".time( ) - 1 );
header( "Expires: ".gmdate( "D, d M Y H:i:s", time( ) + ( 0 * 60 ) )." GMT" );
header( "Cache-Control: "."no-cache" );

//---- For IIP ----

$All = 0;
$AllVisible = 0;
$Visible = 1;

//---- CursorTypeEnum Values ----

$adOpenForwardOnly = 0;
$adOpenKeyset = 1;
$adOpenDynamic = 2;
$adOpenStatic = 3;

//---- CursorOptionEnum Values ----

$adHoldRecords = 0x00000100;
$adMovePrevious = 0x00000200;
$adAddNew = 0x01000400;
$adDelete = 0x01000800;
$adUpdate = 0x01008000;
$adBookmark = 0x00002000;
$adApproxPosition = 0x00004000;
$adUpdateBatch = 0x00010000;
$adResync = 0x00020000;

//---- LockTypeEnum Values ----

$adLockReadOnly = 1;
$adLockPessimistic = 2;
$adLockOptimistic = 3;
$adLockBatchOptimistic = 4;

//---- CursorLocationEnum Values ----

$adUseClient = 1;
$adUseServer = 2;
$adUseClientBatch = 3;

//---- DataTypeEnum Values ----

$adEmpty = 0;
$adTinyInt = 16;
$adSmallInt = 2;
$adInteger = 3;
$adBigInt = 20;
$adUnsignedTinyInt = 17;
$adUnsignedSmallInt = 18;
$adUnsignedInt = 19;
$adUnsignedBigInt = 21;
$adSingle = 4;
$adDouble = 5;
$adCurrency = 6;
$adDecimal = 14;
$adNumeric = 131;
$adBoolean = 11;
$adError = 10;
$adUserDefined = 132;
$adVariant = 12;
$adIDispatch = 9;
$adIUnknown = 13;
$adGUID = 72;
$adDate = 7;
$adDBDate = 133;
$adDBTime = 134;
$adDBTimeStamp = 135;
$adBSTR = 8;
$adChar = 129;
$adVarChar = 200;
$adLongVarChar = 201;
$adWChar = 130;
$adVarWChar = 202;
$adLongVarWChar = 203;
$adBinary = 128;
$adVarBinary = 204;
$adLongVarBinary = 205;

//---- ConnectPromptEnum Values ----

$adPromptAlways = 1;
$adPromptComplete = 2;
$adPromptCompleteRequired = 3;
$adPromptNever = 4;

//---- ConnectModeEnum Values ----

$adModeUnknown = 0;
$adModeRead = 1;
$adModeWrite = 2;
$adModeReadWrite = 3;
$adModeShareDenyRead = 4;
$adModeShareDenyWrite = 8;

//$adModeShareExclusive=0x$c;

$adModeShareDenyNone = 0x10;

//---- IsolationLevelEnum Values ----
//$adXactUnspecified=0x$ffffffff;

$adXactChaos = 0x00000010;
$adXactReadUncommitted = 0x00000100;
$adXactBrowse = 0x00000100;
$adXactCursorStability = 0x00001000;
$adXactReadCommitted = 0x00001000;
$adXactRepeatableRead = 0x00010000;
$adXactSerializable = 0x00100000;
$adXactIsolated = 0x00100000;

//---- XactAttributeEnum Values ----

$adXactPollAsync = 2;
$adXactPollSyncPhaseOne = 4;
$adXactCommitRetaining = 0x00020000;
$adXactAbortRetaining = 0x00040000;
$adXactAbortAsync = 0x00080000;

//---- FieldAttributeEnum Values ----

$adFldBookmark = 0x00000001;
$adFldMayDefer = 0x00000002;
$adFldUpdatable = 0x00000004;
$adFldUnknownUpdatable = 0x00000008;
$adFldFixed = 0x00000010;
$adFldIsNullable = 0x00000020;
$adFldMayBeNull = 0x00000040;
$adFldLong = 0x00000080;
$adFldRowID = 0x00000100;
$adFldRowVersion = 0x00000200;
$adFldCacheDeferred = 0x00001000;

//---- EditModeEnum Values ----

$adEditNone = 0x0000;
$adEditInProgress = 0x0001;
$adEditAdd = 0x0002;

//---- RecordStatusEnum Values ----

$adRecOK = 0x0000000;
$adRecNew = 0x0000001;
$adRecModified = 0x0000002;
$adRecDeleted = 0x0000004;
$adRecUnmodified = 0x0000008;
$adRecInvalid = 0x0000010;
$adRecMultipleChanges = 0x0000040;
$adRecPendingChanges = 0x0000080;
$adRecCanceled = 0x0000100;
$adRecCantRelease = 0x0000400;
$adRecConcurrencyViolation = 0x0000800;
$adRecIntegrityViolation = 0x0001000;
$adRecMaxChangesExceeded = 0x0002000;
$adRecObjectOpen = 0x0004000;
$adRecOutOfMemory = 0x0008000;
$adRecPermissionDenied = 0x0010000;
$adRecSchemaViolation = 0x0020000;
$adRecDBDeleted = 0x0040000;

//---- GetRowsOptionEnum Values ----

$adGetRowsRest = - 1;

//---- PositionEnum Values ----

$adPosUnknown = - 1;
$adPosBOF = - 2;
$adPosEOF = - 3;

//---- AffectEnum Values ----

$adAffectCurrent = 1;
$adAffectGroup = 2;
$adAffectAll = 3;

//---- FilterGroupEnum Values ----

$adFilterNone = 0;
$adFilterPendingRecords = 1;
$adFilterAffectedRecords = 2;
$adFilterFetchedRecords = 3;

//---- PropertyAttributesEnum Values ----

$adPropNotSupported = 0x0000;
$adPropRequired = 0x0001;
$adPropOptional = 0x0002;
$adPropRead = 0x0200;
$adPropWrite = 0x0400;

//---- ErrorValueEnum Values ----
/*//$adErrInvalidArgument=0x$bb9;
//$adErrNoCurrentRecord=0x$bcd;
//$adErrIllegalOperation=0x$c93;
//$adErrInTransaction=0x$cae;
$adErrFeatureNotAvailable=0x$cb3;
$adErrItemNotFound=0x$cc1;
$adErrObjectNotSet=0x$d5c;
$adErrDataConversion=0x$d5d;
$adErrObjectClosed=0x$e78;
$adErrObjectOpen=0x$e79;
$adErrProviderNotFound=0x$e7a;
$adErrBoundToCommand=0x$e7b;*/
//---- ParameterAttributesEnum Values ----

$adParamSigned = 0x0010;
$adParamNullable = 0x0040;
$adParamLong = 0x0080;

//---- ParameterDirectionEnum Values ----

$adParamUnknown = 0x0000;
$adParamInput = 0x0001;
$adParamOutput = 0x0002;
$adParamInputOutput = 0x0003;
$adParamReturnValue = 0x0004;

//---- CommandTypeEnum Values ----

$adCmdUnknown = 0;
$adCmdText = 0x0001;
$adCmdTable = 0x0002;
$adCmdStoredProc = 0x0004;

function ReturnConnection( ) {
	extract( $GLOBALS );

	//ReturnConnection = "Provider=SQLOLEDB.1;User ID=eldsjal;password=l7tterman;Initial Catalog=eldsjal;Data Source = 192.168.1.9;Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096"

	$function_ret = $application['eldsjaldb'];
	return $function_ret;
}

//Read only recordset

function ReturnRS_R( $sql ) {
	extract( $GLOBALS );

	// $RSi is of type "ADODB.RecordSet"
	// $cmd is of type "ADODB.Command"

	$cmd_ActiveConnection = ReturnConnection( );
	$cmd_CommandText = $sql;
	$cmd_CommandType = $adCmdText;
	echo $adUseServer;

	//Use server cursor to allow TEXT columns

	$rs = mssql_query( $cmd );

	//  $cmd_ActiveConnection='';

	$cmd = null;
	$ReturnRS_R = $RSi;
	return $function_ret;
}

//Read and write recordset

function ReturnRS_RW( $sql ) {
	extract( $GLOBALS );

	// $RSi is of type "ADODB.RecordSet"
	// $cmd is of type "ADODB.Command"

	$cmd_ActiveConnection = ReturnConnection( );
	$cmd_CommandText = $sql;
	$cmd_CommandType = $adCmdText;
	echo $adUseClient;
	$rs = mssql_query( $cmd );
	$cmd = null;
	$ReturnRS_RW = $RSi;
	return $function_ret;
}

//Read and write recordset

function ExecSQL( $sql ) {
	extract( $GLOBALS );

	// $RSi is of type "ADODB.RecordSet"
	// $cmd is of type "ADODB.Command"

	$cmd_ActiveConnection = ReturnConnection( );
	$cmd_CommandText = $sql;
	$cmd_CommandType = $adCmdText;
	echo $adUseClient;
	$rs = mysql_query( $cmd );
	$cmd = null;
	$ExecSQL = $RSi;
	return $function_ret;
}

//Read and write recordset with BLOB (do not use!)

function ReturnRS_B( $sql ) {
	extract( $GLOBALS );

	// $conn is of type "ADODB.Connection"

	$a2p_connstr = ReturnConnection( );
	$a2p_uid = strstr( $a2p_connstr, 'uid' );
	$a2p_uid = substr( $d, strpos( $d, '=' ) + 1, strpos( $d, ';' ) - strpos( $d, '=' ) - 1 );
	$a2p_pwd = strstr( $a2p_connstr, 'pwd' );
	$a2p_pwd = substr( $d, strpos( $d, '=' ) + 1, strpos( $d, ';' ) - strpos( $d, '=' ) - 1 );
	$a2p_database = strstr( $a2p_connstr, 'dsn' );
	$a2p_database = substr( $d, strpos( $d, '=' ) + 1, strpos( $d, ';' ) - strpos( $d, '=' ) - 1 );
	$conn = mysql_connect( "localhost", $a2p_uid, $a2p_pwd );
	mysql_select_db( $a2p_database, $conn );
	$RSi = mysql_query(( $sql ), $conn );;
	$conn = null;
	$ReturnRS_B = $RSi;
	return $function_ret;
}

//Format text from database

function FormatText( $strText ) {
	extract( $GLOBALS );
	if( strlen( $strText ) == 0 ) {
		$function_ret = "";
		return $function_ret;
	}
	$function_ret = str_replace( "\r\n", "<br>", $strText );

	//FormatText = strText

	return $function_ret;
}

function CreateVBArray( $Columns ) {
	extract( $GLOBALS );
	$Columns = explode( ",", $columns );
	$function_ret = $Columns;
	return $function_ret;
}

function ParseDate( $DateToParse ) {
	extract( $GLOBALS );
	$function_ret = substr( $DateToParse, 0, 10 );
	return $function_ret;
}

function GetArticles( $ArticleID, $blnVisible ) {
	extract( $GLOBALS );

	//If visible show only visible, if AllVisible show also hidden articles

	if( $blnVisible == $Visible ) {
		$strIn = "(1)";
	}
	else {
		$strIn = "(0, 1)";
	}
	if( $ArticleID != 0 ) {
		$sql = "select * from article where isactive in ".$strin." and articleid = ".$articleid." order by dateadded";
	}
	else {
		$sql = "select * from article where isactive in ".$strin." order by dateadded";
	}
	$GetArticles = ReturnRS_R( $Sql );
	return $function_ret;
}

function GetUsers( $userid ) {
	extract( $GLOBALS );
	if( $userid != 0 ) {
		$sql = "select * from users where userid = ".$userid." order by dateadded";
	}
	else {
		$sql = "select * from users order by dateadded";
	}
	$GetUsers = ReturnRS_R( $Sql );
	return $function_ret;
}

function GetDocuments( $DocumentID ) {
	extract( $GLOBALS );
	if( $DocumentID != 0 ) {
		$sql = "select * from documents where documentid = ".$documentid." order by dateadded";
	}
	else {
		$sql = "select * from documents order by dateadded";
	}
	$GetDocuments = ReturnRS_R( $Sql );
	return $function_ret;
}

function GetItems( $ItemID, $blnVisible ) {
	extract( $GLOBALS );

	//If visible show only visible, if AllVisible show also hidden articles

	if( $blnVisible == $Visible ) {
		$strIn = "(1)";
	}
	else {
		$strIn = "(0, 1)";
	}
	if( $ItemID != 0 ) {
		$sql = "select * from item where isactive in ".$strin." and itemid = ".$itemid." order by dateadded";
	}
	else {
		$sql = "select * from item where isactive in ".$strin." order by dateadded";
	}
	$GetItems = ReturnRS_R( $Sql );
	return $function_ret;
}

function GetArticleID( $MenuID ) {
	extract( $GLOBALS );
	$sql = "select articleid from articlemenucross where menuid = ".$MenuID;
	$RSArticle = ReturnRS_RW( $Sql );
	if( $RSArticle ) {
		$function_ret = $RSArticle['articleid'];
	}
	else {
		$function_ret = 9;
	}
	return $function_ret;
}

function GetArticleTemplate( $strSelect ) {
	extract( $GLOBALS );
	$sql = "select * from article where articleid = 1";
	$RSTemp = ReturnRS_R( $Sql );
	switch( $strSelect ) {
		case "Article":
			$function_ret = $RSTemp['articletext'];
			break;

		case "Author":
			$function_ret = $RSTemp['author'];
			break;

		case "Header":
			$function_ret = $RSTemp['header'];
			break;
	}
	return $function_ret;
}

function GetItemTemplate( $strSelect ) {
	extract( $GLOBALS );
	$sql = "select * from item where itemid = 1";
	$RSTemp = ReturnRS_R( $Sql );
	switch( $strSelect ) {
		case "Item":
			$function_ret = $RSTemp['itemtext'];
			break;

		case "Author":
			$function_ret = $RSTemp['author'];
			break;

		case "Header":
			$function_ret = $RSTemp['header'];
			break;
	}
	return $function_ret;
}

function GetMainMenu( $MenuID, $blnVisible ) {
	extract( $GLOBALS );

	//If visible show only visible, if AllVisible show also hidden articles

	if( $blnVisible == $Visible ) {
		$strIn = "(1)";
	}
	else {
		$strIn = "(0, 1)";
	}
	if( $MenuID != 0 ) {
		$sql = "select * from menu where isactive in ".$strin." and menuid = ".$menuid." and ismain = 1 order by priority";
	}
	else {
		$sql = "select * from menu where isactive  in ".$strin." and ismain = 1 order by priority";
	}
	$GetMainMenu = ReturnRS_R( $Sql );
	return $function_ret;
}

function Debug( $strText ) {
	extract( $GLOBALS );
	print "<pre>".$strText."</pre>";
	exit( );
	return $function_ret;
}

function StripChars( $strText ) {
	extract( $GLOBALS );
	$function_ret = str_replace( "'", "&#39;", $strText );
	return $function_ret;
}

function SaveToFile( $strContent, $fileName ) {
	extract( $GLOBALS );
	if( !$strContent == "" ) {
		$File = $DOCUMENT_ROOT."."."\\".$fileName;
		$ForReading = 1;
		$ForWriting = 2;
		$ForAppending = 8;

		// $fso is of type "Scripting.FileSystemObject"

		$f = fopen( $File, "r" );
		$strBegin = "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.0 Transitional//EN'><base href='http://localhost/'><html><head><title>Untitled</title><link rel='STYLESHEET' type='text/css' href='../css/iip.css'></head><body>";
		$strEnd = "</body></html>";
		fputs( $f, $strBegin );
		fputs( $f, $strContent );
		fputs( $f, $strEnd );
		fclose( $f );
		$function_ret = true;
	}
	else {
		$function_ret = false;
	}
	return $function_ret;
}

function RenderPage( $ArticleID ) {
	extract( $GLOBALS );
	$sql = "select articletext from article where articleid = ".$ArticleID;
	$RSPage = ReturnRS_R( $Sql );
	if( $RSPage ) {
		if(( strpos( $RSPage['articletext'], "[LINK]" ) ? strpos( $RSPage['articletext'], "[LINK]" ) + 1 : 0 ) ) {
			$strLink = str_replace( "[LINK]", "", $RSPage['articletext'] );
			print "<Iframe src='".$strLink."' width=700 height=500></iframe>";
		}
		else {
			print $RSPage['articletext'];
		}
	}
	else {
		print "<font size=+3>Sidan hittades inte</font>";
	}
	flush( );
	return $function_ret;
}

/*

function stripHTML($strHTML)
{
  extract($GLOBALS);

//Strips the HTML tags from strHTML

  $objRegExp=new Regexp();;

  $objRegExp->IgnoreCase=true;
  $objRegExp->Global=true;
//objRegExp.Pattern = "<(.|\\n)+?>"
  $objRegExp->Pattern="<\\?(.|\\n)+?>";

//Replace all HTML tag matches with the empty string
  $strOutput=$objRegExp->Replace($strHTML

//Replace all < and > with &lt; and &gt;
//strOutput = Replace(strOutput, "<", "&lt;")
//strOutput = Replace(strOutput, ">", "&gt;")

  $function_ret=$strOutput; //Return the value of strOutput

  $objRegExp=null;

  return $function_ret;
} 

/*
function SafeHTML($pStrHTML)
{
  extract($GLOBALS);


  if (gettype($pStrHTML)==$vbNull)
  {
    return $function_ret;

  } 
  if ($pStrHTML=="")
  {
    return $function_ret;

  } 
  $lObjRegExp=new RegExp();;
  $lObjRegExp->Global=true;
  $lObjRegExp->IgnoreCase=true;
  $lObjRegExp->Pattern="<(/)?SCRIPT|META|STYLE([^>]*)>";
  $pStrHTML=$lObjRegExp->Replace($pStrHTML
  $lObjRegExp->Pattern="<(/)?(LINK|IFRAME|FRAMESET|FRAME|APPLET|OBJECT)([^>]*)>";
  $pStrHTML=$lObjRegExp->Replace($pStrHTML
  $lObjRegExp->Pattern="(<A[^>]+href\\s?=\\s?\"?javascript:)[^\"]*(\"[^>]+>)";
  $pStrHTML=$lObjRegExp->Replace($pStrHTML
  $lObjRegExp->Pattern="(<IMG[^>]+src\\s?=\\s?\"?javascript:)[^\"]*(\"[^>]+>)";
  $pStrHTML=$lObjRegExp->Replace($pStrHTML
  $lObjRegExp->Pattern="<([^>]*) on[^=\\s]+\\s?=\\s?([^>]*)>";
  $pStrHTML=$lObjRegExp->Replace($pStrHTML
  $lObjRegExp=null;


  $function_ret=$pStrHTML;

  return $function_ret;
}
*/

